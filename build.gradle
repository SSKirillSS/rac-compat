buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.freefair.gradle:lombok-plugin:6.6'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

apply plugin: "io.freefair.lombok"
apply plugin: 'java'

version = minecraft_version + "-" + mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

mixin {
    add sourceSets.main, "raccompat.refmap.json"
    config "raccompat.mixins.json"

    debug.verbose = true
    debug.export = true
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            jvmArg "-XX:+AllowEnhancedClassRedefinition"
            jvmArg "-XX:+AllowRedefinitionToAddDeleteMethods"

            arg "-mixin.config=" + mod_id + ".mixins.json"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            jvmArg "-XX:+AllowEnhancedClassRedefinition"
            jvmArg "-XX:+AllowRedefinitionToAddDeleteMethods"

            arg "-mixin.config=" + mod_id + ".mixins.json"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "Blamejared maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${forge_version}"

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:0.8.4:processor"
    }

    implementation 'org.jetbrains:annotations:20.1.0'

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.2.0+1.20.1")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.2.0+1.20.1:api")

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:15.2.0.27"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:15.2.0.27"))

    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:15.2.0.27"))

    if (file("libs").isDirectory()) {
        file("libs").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")

            if (file.name != "desktop.ini") {
                println file.name

                def modartifact = file.name.substring(0, splitPos)
                def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
                def modreference = "lib:$modartifact:$modversion"

                dependencies {
                    implementation fg.deobf(project.dependencies.create(modreference) {
                        transitive = false
                    })
                }
            }
        }
    } else file("libs").mkdir()
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, forge_version: forge_version,
        mod_id           : mod_id, mod_name: mod_name, mod_version: mod_version,
        mod_authors      : mod_authors
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "MixinConfigs"            : mod_id + ".mixins.json",
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}